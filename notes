RHT_OCP4_DEV_PASSWORD=32741f016def488f82d6
RHT_OCP4_DEV_USER=lqtpou
RHT_OCP4_GITHUB_USER=avoker
RHT_OCP4_MASTER_API=https://api.ap410.prod.nextcle.com:6443
RHT_OCP4_NEXUS_SERVER=nexus-common.apps.ap410.prod.nextcle.com
RHT_OCP4_QUAY_USER=alan_lu
RHT_OCP4_WILDCARD_DOMAIN=apps.ap410.prod.nextcle.com


[student@workstation multicontainer-application]$ oc create -f todo-app.yml 
pod/mysql created
pod/todoapi created
service/todoapi created
service/mysql created
persistentvolumeclaim/dbclaim created
[student@workstation multicontainer-application]$ 

[student@workstation multicontainer-application]$ oc get pods -w
NAME      READY   STATUS    RESTARTS   AGE
mysql     1/1     Running   0          3m4s
todoapi   1/1     Running   0          3m4s
^C[student@workstation multicontainer-application]$ podman ps
CONTAINER ID  IMAGE       COMMAND     CREATED     STATUS      PORTS       NAMES
[student@workstation multicontainer-application]$ ps -ef|less

After bringing network down:
[student@workstation multicontainer-application]$ oc get pods -w
Unable to connect to the server: dial tcp: lookup api.ap410.prod.nextcle.com on 172.25.250.254:53: dial udp 172.25.250.254:53: connect: network is unreachable

--
[student@workstation ~]$ oc get pods -w
NAME      READY   STATUS    RESTARTS   AGE
mysql     1/1     Running   0          20m
todoapi   1/1     Running   0          20m

--
[student@workstation ~]$ ss -n4
Netid   State        Recv-Q   Send-Q       Local Address:Port         Peer Address:Port   Process   
tcp     CLOSE-WAIT   1        0             172.25.250.9:59384           8.43.85.4:443              
tcp     ESTAB        0        0             172.25.250.9:57330       169.56.41.206:6443             
[student@workstation ~]$ sudo lsof -i tcp:59384
COMMAND    PID    USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
gnome-she 2084 student   21u  IPv4  46134      0t0  TCP workstation.lab.example.com:59384->master2.openshift4.gnome.org:https (CLOSE_WAIT)
[student@workstation ~]$ sudo lsof -i tcp:57330 -P -n
COMMAND  PID    USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
oc      2909 student    3u  IPv4  51557      0t0  TCP 172.25.250.9:57330->169.56.41.206:6443 (ESTABLISHED)

--
[student@workstation ~]$ oc port-forward mysql 3306:3306
Forwarding from 127.0.0.1:3306 -> 3306
Forwarding from [::1]:3306 -> 3306

[student@workstation ~]$ ps -ef|grep "oc port-forward"
student     3172    2817  0 05:39 pts/0    00:00:00 oc port-forward mysql 3306:3306
[student@workstation ~]$ lsof -p 3172 -n -P
COMMAND  PID    USER   FD      TYPE DEVICE  SIZE/OFF     NODE NAME
oc      3172 student  cwd       DIR  252,3      4096 25720657 /home/student
oc      3172 student  rtd       DIR  252,3       224      128 /
oc      3172 student  txt       REG  252,3 122824224 17036293 /usr/local/bin/oc
oc      3172 student  mem       REG  252,3   3167872     6547 /usr/lib64/libc-2.28.so
oc      3172 student  mem       REG  252,3     28856     6549 /usr/lib64/libdl-2.28.so
oc      3172 student  mem       REG  252,3    321552     6561 /usr/lib64/libpthread-2.28.so
oc      3172 student  mem       REG  252,3    278512     6540 /usr/lib64/ld-2.28.so
oc      3172 student    0u      CHR  136,0       0t0        3 /dev/pts/0
oc      3172 student    1u      CHR  136,0       0t0        3 /dev/pts/0
oc      3172 student    2u      CHR  136,0       0t0        3 /dev/pts/0
oc      3172 student    3u  a_inode   0,14         0    10316 [eventpoll]
oc      3172 student    4r     FIFO   0,13       0t0    54896 pipe
oc      3172 student    5w     FIFO   0,13       0t0    54896 pipe
oc      3172 student    7u     IPv4  55303       0t0      TCP 172.25.250.9:57340->169.56.41.206:6443 (ESTABLISHED)
oc      3172 student    8u     IPv4  54900       0t0      TCP 127.0.0.1:3306 (LISTEN)
oc      3172 student    9u     IPv6  54901       0t0      TCP [::1]:3306 (LISTEN)
[student@workstation ~]$ 

-- expose --
[student@workstation ~]$ oc expose service todoapi
route.route.openshift.io/todoapi exposed
[student@workstation ~]$ oc status |grep -o "http:.*com"
http://todoapi-lqtpout-application.apps.ap410.prod.nextcle.com
[student@workstation ~]$ 

[student@workstation ~]$ oc status 
In project lqtpout-application on server https://api.ap410.prod.nextcle.com:6443

svc/mysql - 172.30.5.221:3306
  pod/mysql runs registry.redhat.io/rhel8/mysql-80:1

http://todoapi-lqtpout-application.apps.ap410.prod.nextcle.com to pod port 30080 (svc/todoapi)
  pod/todoapi runs quay.io/redhattraining/do180-todonodejs-12

View details with 'oc describe <resource>/<name>' or list resources with 'oc get all'.
[student@workstation ~]$ 


-- templates --
[student@workstation ~]$ oc get templates
No resources found in lqtpout-application namespace.
[student@workstation ~]$ oc get templates -n -h
Error from server (Forbidden): templates.template.openshift.io is forbidden: User "lqtpou" cannot list resource "templates" in API group "template.openshift.io" in the namespace "-h"
[student@workstation ~]$ oc get templates -n openshift |wc -l
105
[student@workstation ~]$ 

[student@workstation ~]$ oc get template mysql-persistent -n openshift 
NAME               DESCRIPTION                                                                        PARAMETERS        OBJECTS
mysql-persistent   MySQL database service, with persistent storage. For more information about u...   9 (3 generated)   4
[student@workstation ~]$ 
[student@workstation ~]$ oc get template mysql-persistent -n openshift -o yaml > openshift.mysql-persistent.template
[student@workstation ~]$ 

-- oc get all --

[student@workstation ~]$ oc get all
No resources found in lqtpout-template namespace.
[student@workstation ~]$ oc project lqtpout-application
Now using project "lqtpout-application" on server "https://api.ap410.prod.nextcle.com:6443".
[student@workstation ~]$ oc get all
NAME                 READY   STATUS      RESTARTS   AGE
pod/mysql            1/1     Running     0          2d3h
pod/mysql-1-deploy   0/1     Completed   0          45h
pod/mysql-1-wk8xv    1/1     Running     0          45h
pod/todoapi          1/1     Running     0          2d3h

NAME                            DESIRED   CURRENT   READY   AGE
replicationcontroller/mysql-1   1         1         1       45h

NAME              TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)     AGE
service/mysql     ClusterIP   172.30.5.221    <none>        3306/TCP    2d3h
service/todoapi   ClusterIP   172.30.120.15   <none>        30080/TCP   2d3h

NAME                                       REVISION   DESIRED   CURRENT   TRIGGERED BY
deploymentconfig.apps.openshift.io/mysql   1          1         1         config,image(mysql:8.0-el8)

NAME                               HOST/PORT                                                 PATH   SERVICES   PORT    TERMINATION   WILDCARD
route.route.openshift.io/todoapi   todoapi-lqtpout-application.apps.ap410.prod.nextcle.com          todoapi    30080                 None
[student@workstation ~]$ 

---
/home/student/DO180/labs
[student@workstation labs]$ cd multicontainer-openshift/
[student@workstation multicontainer-openshift]$ ll
total 8
-rw-rw-r--. 1 student student  300 Mar 22 09:13 db.sql
-rw-rw-r--. 1 student student 3638 Mar 22 09:13 todo-template.json
[student@workstation multicontainer-openshift]$ oc process -f todo-template.json |oc create -f -
W0726 09:37:48.217815    3843 shim_kubectl.go:58] Using non-groupfied API resources is deprecated and will be removed in a future release, update apiVersion to "template.openshift.io/v1" for your resource
Error from server (AlreadyExists): error when creating "STDIN": pods "mysql" already exists
Error from server (AlreadyExists): error when creating "STDIN": pods "todoapi" already exists
Error from server (AlreadyExists): error when creating "STDIN": services "todoapi" already exists
Error from server (AlreadyExists): error when creating "STDIN": services "mysql" already exists
Error from server (AlreadyExists): error when creating "STDIN": persistentvolumeclaims "dbclaim" already exists
[student@workstation multicontainer-openshift]$ oc project
Using project "lqtpout-application" on server "https://api.ap410.prod.nextcle.com:6443".
[student@workstation multicontainer-openshift]$ oc get projects
NAME                  DISPLAY NAME   STATUS
lqtpout-application                  Active
lqtpout-template                     Active
[student@workstation multicontainer-openshift]$ oc project lqtpout-template
Now using project "lqtpout-template" on server "https://api.ap410.prod.nextcle.com:6443".
[student@workstation multicontainer-openshift]$ oc process -f todo-template.json |oc create -f -
W0726 09:38:49.795778    3905 shim_kubectl.go:58] Using non-groupfied API resources is deprecated and will be removed in a future release, update apiVersion to "template.openshift.io/v1" for your resource
pod/mysql created
pod/todoapi created
service/todoapi created
service/mysql created
persistentvolumeclaim/dbclaim created
[student@workstation multicontainer-openshift]$ oc get pods -w
NAME      READY   STATUS    RESTARTS   AGE
mysql     1/1     Running   0          30s
todoapi   1/1     Running   0          30s
^C[student@workstation multicontainer-openshift]$ oc port-forward mysql 3306:3306
Forwarding from 127.0.0.1:3306 -> 3306
Forwarding from [::1]:3306 -> 3306
Handling connection for 3306
^C[student@workstation multicontainer-openshift]$ oc port-forward mysql 3306:3306^C
[student@workstation multicontainer-openshift]$ oc expose service todoapi
route.route.openshift.io/todoapi exposed
[student@workstation multicontainer-openshift]$ oc get service
NAME      TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)     AGE
mysql     ClusterIP   172.30.88.78   <none>        3306/TCP    5m56s
todoapi   ClusterIP   172.30.10.80   <none>        30080/TCP   5m56s
[student@workstation multicontainer-openshift]$ oc get routes
NAME      HOST/PORT                                              PATH   SERVICES   PORT    TERMINATION   WILDCARD
todoapi   todoapi-lqtpout-template.apps.ap410.prod.nextcle.com          todoapi    30080                 None
[student@workstation multicontainer-openshift]$ oc status
In project lqtpout-template on server https://api.ap410.prod.nextcle.com:6443

svc/mysql - 172.30.88.78:3306
  pod/mysql runs registry.redhat.io/rhel8/mysql-80:1

http://todoapi-lqtpout-template.apps.ap410.prod.nextcle.com to pod port 30080 (svc/todoapi)
  pod/todoapi runs quay.io/redhattraining/do180-todonodejs-12

View details with 'oc describe <resource>/<name>' or list resources with 'oc get all'.
[student@workstation multicontainer-openshift]$ 


--- oc logs man
student@workstation ~]$ oc logs
error: expected 'logs [-f] [-p] (POD | TYPE/NAME) [-c CONTAINER]'.
POD or TYPE/NAME is a required argument for the logs command
See 'oc logs -h' for help and examples
[student@workstation ~]$ oc logs -h
Print the logs for a resource.

 Supported resources are builds, build configs (bc), deployment configs (dc), and pods. When a pod is specified and has
more than one container, the container name should be specified via -c. When a build config or deployment config is
specified, you can view the logs for a particular version of it via --version.

 If your pod is failing to start, you may need to use the --previous option to see the logs of the last attempt.

Usage:
  oc logs [-f] [-p] (POD | TYPE/NAME) [-c CONTAINER] [flags]

Examples:
  # Start streaming the logs of the most recent build of the openldap build config
  oc logs -f bc/openldap
  
  # Start streaming the logs of the latest deployment of the mysql deployment config
  oc logs -f dc/mysql
  
  # Get the logs of the first deployment for the mysql deployment config. Note that logs
  # from older deployments may not exist either because the deployment was successful
  # or due to deployment pruning or manual deletion of the deployment
  oc logs --version=1 dc/mysql
  
  # Return a snapshot of ruby-container logs from pod backend
  oc logs backend -c ruby-container
  
  # Start streaming of ruby-container logs from pod backend
  oc logs -f pod/backend -c ruby-container

Options:
      --all-containers=false: Get all containers' logs in the pod(s).
  -c, --container='': Print the logs of this container
  -f, --follow=false: Specify if the logs should be streamed.
      --ignore-errors=false: If watching / following pod logs, allow for any errors that occur to be non-fatal
      --insecure-skip-tls-verify-backend=false: Skip verifying the identity of the kubelet that logs are requested from.
In theory, an attacker could provide invalid log content back. You might want to use this if your kubelet serving
certificates have expired.
      --limit-bytes=0: Maximum bytes of logs to return. Defaults to no limit.
      --max-log-requests=5: Specify maximum number of concurrent logs to follow when using by a selector. Defaults to 5.
      --pod-running-timeout=20s: The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one
pod is running
      --prefix=false: Prefix each log line with the log source (pod name and container name)
  -p, --previous=false: If true, print the logs for the previous instance of the container in a pod if it exists.
  -l, --selector='': Selector (label query) to filter on.
      --since=0s: Only return logs newer than a relative duration like 5s, 2m, or 3h. Defaults to all logs. Only one of
since-time / since may be used.
      --since-time='': Only return logs after a specific date (RFC3339). Defaults to all logs. Only one of since-time /
since may be used.
      --tail=-1: Lines of recent log file to display. Defaults to -1 with no selector, showing all log lines otherwise
10, if a selector is provided.
      --timestamps=false: Include timestamps on each line in the log output
      --version=0: View the logs of a particular build or deployment by version if greater than zero

Use "oc options" for a list of global command-line options (applies to all commands).
[student@workstation ~]$ 

-- oc label
[student@workstation multicontainer-openshift]$ oc label 
error: one or more resources must be specified as <resource> <name> or <resource>/<name>
[student@workstation multicontainer-openshift]$ oc label -h
Update the labels on a resource.

  *  A label key and value must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and
underscores, up to  63 characters each.
  *  Optionally, the key can begin with a DNS subdomain prefix and a single '/', like example.com/my-app.
  *  If --overwrite is true, then existing labels can be overwritten, otherwise attempting to overwrite a label will
result in an error.
  *  If --resource-version is specified, then updates will use this resource version, otherwise the existing
resource-version will be used.

Usage:
  oc label [--overwrite] (-f FILENAME | TYPE NAME) KEY_1=VAL_1 ... KEY_N=VAL_N [--resource-version=version] [flags]

Examples:
  # Update pod 'foo' with the label 'unhealthy' and the value 'true'
  oc label pods foo unhealthy=true
  
  # Update pod 'foo' with the label 'status' and the value 'unhealthy', overwriting any existing value
  oc label --overwrite pods foo status=unhealthy
  
  # Update all pods in the namespace
  oc label pods --all status=unhealthy
  
  # Update a pod identified by the type and name in "pod.json"
  oc label -f pod.json status=unhealthy
  
  # Update pod 'foo' only if the resource is unchanged from version 1
  oc label pods foo status=unhealthy --resource-version=1
  
  # Update pod 'foo' by removing a label named 'bar' if it exists
  # Does not require the --overwrite flag
  oc label pods foo bar-

Options:
      --all=false: Select all resources, in the namespace of the specified resource types
  -A, --all-namespaces=false: If true, check the specified action in all namespaces.
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in
the template. Only applies to golang and jsonpath output formats.
      --dry-run='none': Must be "none", "server", or "client". If client strategy, only print the object that would be
sent, without sending it. If server strategy, submit server-side request without persisting the resource.
      --field-manager='kubectl-label': Name of the manager used to track field ownership.
      --field-selector='': Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector
key1=value1,key2=value2). The server only supports a limited number of field queries per type.
  -f, --filename=[]: Filename, directory, or URL to files identifying the resource to update the labels
  -k, --kustomize='': Process the kustomization directory. This flag can't be used together with -f or -R.
      --list=false: If true, display the labels for a given resource.
      --local=false: If true, label will NOT contact api-server but run locally.
  -o, --output='': Output format. One of:
json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file.
      --overwrite=false: If true, allow labels to be overwritten, otherwise reject label updates that overwrite existing
labels.
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage
related manifests organized within the same directory.
      --resource-version='': If non-empty, the labels update will only succeed if this is the current resource-version
for the object. Only valid when specifying a single resource.
  -l, --selector='': Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l
key1=value1,key2=value2).
      --show-managed-fields=false: If true, keep the managedFields when printing objects in JSON or YAML format.
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The
template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].

Use "oc options" for a list of global command-line options (applies to all commands).

##
[student@workstation nodejs-app]$ oc new-app --name nodejs-dev nodejs:16-ubi8~. --context-dir=nodejs-app --build-env npm_config_registry=http://nexus-common.apps.ap410.prod.nextcle.com/repository/nodejs 
--> Found image dfd08e2 (6 months old) in image stream "openshift/nodejs" under tag "16-ubi8" for "nodejs:16-ubi8"

    Node.js 16 
    ---------- 
    Node.js 16 available as container is a base platform for building and running various Node.js 16 applications and frameworks. Node.js is a platform built on Chrome's JavaScript runtime for easily building fast, scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.

    Tags: builder, nodejs, nodejs16

    * A source build using source code from https://github.com/avoker/DO180-apps#troubleshoot-review will be created
      * The resulting image will be pushed to image stream tag "nodejs-dev:latest"
      * Use 'oc start-build' to trigger a new build

--> Creating resources ...
    imagestream.image.openshift.io "nodejs-dev" created
    buildconfig.build.openshift.io "nodejs-dev" created
    deployment.apps "nodejs-dev" created
    service "nodejs-dev" created
--> Success
    Build scheduled, use 'oc logs -f buildconfig/nodejs-dev' to track its progress.
    Application is not exposed. You can expose services to the outside world by executing one or more of the commands below:
     'oc expose service/nodejs-dev' 
    Run 'oc status' to view your app.
[student@workstation nodejs-app]$ oc status
In project lqtpou-nodejs-app on server https://api.ap410.prod.nextcle.com:6443

svc/nodejs-dev - 172.30.134.62:8080
  deployment/nodejs-dev deploys istag/nodejs-dev:latest <-
    bc/nodejs-dev source builds https://github.com/avoker/DO180-apps#troubleshoot-review on openshift/nodejs:16-ubi8 
      build #1 running for 7 seconds
    deployment #1 running for 7 seconds - 0/1 pods growing to 1


1 info identified, use 'oc status --suggest' to see details.
[student@workstation nodejs-app]$


#############
# oc delete
#############
[student@workstation ~]$ oc delete -h
Delete resources by file names, stdin, resources and names, or by resources and label selector.

 JSON and YAML formats are accepted. Only one type of argument may be specified: file names, resources and names, or
resources and label selector.

 Some resources, such as pods, support graceful deletion. These resources define a default period before they are
forcibly terminated (the grace period) but you may override that value with the --grace-period flag, or pass --now to
set a grace-period of 1. Because these resources often represent entities in the cluster, deletion may not be
acknowledged immediately. If the node hosting a pod is down or cannot reach the API server, termination may take
significantly longer than the grace period. To force delete a resource, you must specify the --force flag. Note: only a
subset of resources support graceful deletion. In absence of the support, the --grace-period flag is ignored.

 IMPORTANT: Force deleting pods does not wait for confirmation that the pod's processes have been terminated, which can
leave those processes running until the node detects the deletion and completes graceful deletion. If your processes use
shared storage or talk to a remote API and depend on the name of the pod to identify themselves, force deleting those
pods may result in multiple processes running on different machines using the same identification which may lead to data
corruption or inconsistency. Only force delete pods when you are sure the pod is terminated, or if your application can
tolerate multiple copies of the same pod running at once. Also, if you force delete pods, the scheduler may place new
pods on those nodes before the node has released those resources and causing those pods to be evicted immediately.

 Note that the delete command does NOT do resource version checks, so if someone submits an update to a resource right
when you submit a delete, their update will be lost along with the rest of the resource.

Usage:
  oc delete ([-f FILENAME] | [-k DIRECTORY] | TYPE [(NAME | -l label | --all)]) [flags]

Examples:
  # Delete a pod using the type and name specified in pod.json
  oc delete -f ./pod.json
  
  # Delete resources from a directory containing kustomization.yaml - e.g. dir/kustomization.yaml
  oc delete -k dir
  
  # Delete a pod based on the type and name in the JSON passed into stdin
  cat pod.json | oc delete -f -
  
  # Delete pods and services with same names "baz" and "foo"
  oc delete pod,service baz foo
  
  # Delete pods and services with label name=myLabel
  oc delete pods,services -l name=myLabel
  
  # Delete a pod with minimal delay
  oc delete pod foo --now
  
  # Force delete a pod on a dead node
  oc delete pod foo --force
  
  # Delete all pods
  oc delete pods --all

Options:
      --all=false: Delete all resources, in the namespace of the specified resource types.
  -A, --all-namespaces=false: If present, list the requested object(s) across all namespaces. Namespace in current
context is ignored even if specified with --namespace.
      --cascade='background': Must be "background", "orphan", or "foreground". Selects the deletion cascading strategy
for the dependents (e.g. Pods created by a ReplicationController). Defaults to background.
      --dry-run='none': Must be "none", "server", or "client". If client strategy, only print the object that would be
sent, without sending it. If server strategy, submit server-side request without persisting the resource.
      --field-selector='': Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector
key1=value1,key2=value2). The server only supports a limited number of field queries per type.
  -f, --filename=[]: containing the resource to delete.
      --force=false: If true, immediately remove resources from API and bypass graceful deletion. Note that immediate
deletion of some resources may result in inconsistency or data loss and requires confirmation.
      --grace-period=-1: Period of time in seconds given to the resource to terminate gracefully. Ignored if negative.
Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion).
      --ignore-not-found=false: Treat "resource not found" as a successful delete. Defaults to "true" when --all is
specified.
  -k, --kustomize='': Process a kustomization directory. This flag can't be used together with -f or -R.
      --now=false: If true, resources are signaled for immediate shutdown (same as --grace-period=1).
  -o, --output='': Output mode. Use "-o name" for shorter output (resource/name).
      --raw='': Raw URI to DELETE to the server.  Uses the transport specified by the kubeconfig file.
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage
related manifests organized within the same directory.
  -l, --selector='': Selector (label query) to filter on.
      --timeout=0s: The length of time to wait before giving up on a delete, zero means determine a timeout from the
size of the object
      --wait=true: If true, wait for resources to be gone before returning. This waits for finalizers.

Use "oc options" for a list of global command-line options (applies to all commands).

