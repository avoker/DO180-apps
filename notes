[student@workstation multicontainer-application]$ oc create -f todo-app.yml 
pod/mysql created
pod/todoapi created
service/todoapi created
service/mysql created
persistentvolumeclaim/dbclaim created
[student@workstation multicontainer-application]$ 

[student@workstation multicontainer-application]$ oc get pods -w
NAME      READY   STATUS    RESTARTS   AGE
mysql     1/1     Running   0          3m4s
todoapi   1/1     Running   0          3m4s
^C[student@workstation multicontainer-application]$ podman ps
CONTAINER ID  IMAGE       COMMAND     CREATED     STATUS      PORTS       NAMES
[student@workstation multicontainer-application]$ ps -ef|less

After bringing network down:
[student@workstation multicontainer-application]$ oc get pods -w
Unable to connect to the server: dial tcp: lookup api.ap410.prod.nextcle.com on 172.25.250.254:53: dial udp 172.25.250.254:53: connect: network is unreachable

--
[student@workstation ~]$ oc get pods -w
NAME      READY   STATUS    RESTARTS   AGE
mysql     1/1     Running   0          20m
todoapi   1/1     Running   0          20m

--
[student@workstation ~]$ ss -n4
Netid   State        Recv-Q   Send-Q       Local Address:Port         Peer Address:Port   Process   
tcp     CLOSE-WAIT   1        0             172.25.250.9:59384           8.43.85.4:443              
tcp     ESTAB        0        0             172.25.250.9:57330       169.56.41.206:6443             
[student@workstation ~]$ sudo lsof -i tcp:59384
COMMAND    PID    USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
gnome-she 2084 student   21u  IPv4  46134      0t0  TCP workstation.lab.example.com:59384->master2.openshift4.gnome.org:https (CLOSE_WAIT)
[student@workstation ~]$ sudo lsof -i tcp:57330 -P -n
COMMAND  PID    USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
oc      2909 student    3u  IPv4  51557      0t0  TCP 172.25.250.9:57330->169.56.41.206:6443 (ESTABLISHED)

--
[student@workstation ~]$ oc port-forward mysql 3306:3306
Forwarding from 127.0.0.1:3306 -> 3306
Forwarding from [::1]:3306 -> 3306

[student@workstation ~]$ ps -ef|grep "oc port-forward"
student     3172    2817  0 05:39 pts/0    00:00:00 oc port-forward mysql 3306:3306
[student@workstation ~]$ lsof -p 3172 -n -P
COMMAND  PID    USER   FD      TYPE DEVICE  SIZE/OFF     NODE NAME
oc      3172 student  cwd       DIR  252,3      4096 25720657 /home/student
oc      3172 student  rtd       DIR  252,3       224      128 /
oc      3172 student  txt       REG  252,3 122824224 17036293 /usr/local/bin/oc
oc      3172 student  mem       REG  252,3   3167872     6547 /usr/lib64/libc-2.28.so
oc      3172 student  mem       REG  252,3     28856     6549 /usr/lib64/libdl-2.28.so
oc      3172 student  mem       REG  252,3    321552     6561 /usr/lib64/libpthread-2.28.so
oc      3172 student  mem       REG  252,3    278512     6540 /usr/lib64/ld-2.28.so
oc      3172 student    0u      CHR  136,0       0t0        3 /dev/pts/0
oc      3172 student    1u      CHR  136,0       0t0        3 /dev/pts/0
oc      3172 student    2u      CHR  136,0       0t0        3 /dev/pts/0
oc      3172 student    3u  a_inode   0,14         0    10316 [eventpoll]
oc      3172 student    4r     FIFO   0,13       0t0    54896 pipe
oc      3172 student    5w     FIFO   0,13       0t0    54896 pipe
oc      3172 student    7u     IPv4  55303       0t0      TCP 172.25.250.9:57340->169.56.41.206:6443 (ESTABLISHED)
oc      3172 student    8u     IPv4  54900       0t0      TCP 127.0.0.1:3306 (LISTEN)
oc      3172 student    9u     IPv6  54901       0t0      TCP [::1]:3306 (LISTEN)
[student@workstation ~]$ 

-- expose --
[student@workstation ~]$ oc expose service todoapi
route.route.openshift.io/todoapi exposed
[student@workstation ~]$ oc status |grep -o "http:.*com"
http://todoapi-lqtpout-application.apps.ap410.prod.nextcle.com
[student@workstation ~]$ 

[student@workstation ~]$ oc status 
In project lqtpout-application on server https://api.ap410.prod.nextcle.com:6443

svc/mysql - 172.30.5.221:3306
  pod/mysql runs registry.redhat.io/rhel8/mysql-80:1

http://todoapi-lqtpout-application.apps.ap410.prod.nextcle.com to pod port 30080 (svc/todoapi)
  pod/todoapi runs quay.io/redhattraining/do180-todonodejs-12

View details with 'oc describe <resource>/<name>' or list resources with 'oc get all'.
[student@workstation ~]$ 


-- templates --
[student@workstation ~]$ oc get templates
No resources found in lqtpout-application namespace.
[student@workstation ~]$ oc get templates -n -h
Error from server (Forbidden): templates.template.openshift.io is forbidden: User "lqtpou" cannot list resource "templates" in API group "template.openshift.io" in the namespace "-h"
[student@workstation ~]$ oc get templates -n openshift |wc -l
105
[student@workstation ~]$ 

[student@workstation ~]$ oc get template mysql-persistent -n openshift 
NAME               DESCRIPTION                                                                        PARAMETERS        OBJECTS
mysql-persistent   MySQL database service, with persistent storage. For more information about u...   9 (3 generated)   4
[student@workstation ~]$ 
[student@workstation ~]$ oc get template mysql-persistent -n openshift -o yaml > openshift.mysql-persistent.template
[student@workstation ~]$ 

-- oc get all --

[student@workstation ~]$ oc get all
No resources found in lqtpout-template namespace.
[student@workstation ~]$ oc project lqtpout-application
Now using project "lqtpout-application" on server "https://api.ap410.prod.nextcle.com:6443".
[student@workstation ~]$ oc get all
NAME                 READY   STATUS      RESTARTS   AGE
pod/mysql            1/1     Running     0          2d3h
pod/mysql-1-deploy   0/1     Completed   0          45h
pod/mysql-1-wk8xv    1/1     Running     0          45h
pod/todoapi          1/1     Running     0          2d3h

NAME                            DESIRED   CURRENT   READY   AGE
replicationcontroller/mysql-1   1         1         1       45h

NAME              TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)     AGE
service/mysql     ClusterIP   172.30.5.221    <none>        3306/TCP    2d3h
service/todoapi   ClusterIP   172.30.120.15   <none>        30080/TCP   2d3h

NAME                                       REVISION   DESIRED   CURRENT   TRIGGERED BY
deploymentconfig.apps.openshift.io/mysql   1          1         1         config,image(mysql:8.0-el8)

NAME                               HOST/PORT                                                 PATH   SERVICES   PORT    TERMINATION   WILDCARD
route.route.openshift.io/todoapi   todoapi-lqtpout-application.apps.ap410.prod.nextcle.com          todoapi    30080                 None
[student@workstation ~]$ 

---
/home/student/DO180/labs
[student@workstation labs]$ cd multicontainer-openshift/
[student@workstation multicontainer-openshift]$ ll
total 8
-rw-rw-r--. 1 student student  300 Mar 22 09:13 db.sql
-rw-rw-r--. 1 student student 3638 Mar 22 09:13 todo-template.json
[student@workstation multicontainer-openshift]$ oc process -f todo-template.json |oc create -f -
W0726 09:37:48.217815    3843 shim_kubectl.go:58] Using non-groupfied API resources is deprecated and will be removed in a future release, update apiVersion to "template.openshift.io/v1" for your resource
Error from server (AlreadyExists): error when creating "STDIN": pods "mysql" already exists
Error from server (AlreadyExists): error when creating "STDIN": pods "todoapi" already exists
Error from server (AlreadyExists): error when creating "STDIN": services "todoapi" already exists
Error from server (AlreadyExists): error when creating "STDIN": services "mysql" already exists
Error from server (AlreadyExists): error when creating "STDIN": persistentvolumeclaims "dbclaim" already exists
[student@workstation multicontainer-openshift]$ oc project
Using project "lqtpout-application" on server "https://api.ap410.prod.nextcle.com:6443".
[student@workstation multicontainer-openshift]$ oc get projects
NAME                  DISPLAY NAME   STATUS
lqtpout-application                  Active
lqtpout-template                     Active
[student@workstation multicontainer-openshift]$ oc project lqtpout-template
Now using project "lqtpout-template" on server "https://api.ap410.prod.nextcle.com:6443".
[student@workstation multicontainer-openshift]$ oc process -f todo-template.json |oc create -f -
W0726 09:38:49.795778    3905 shim_kubectl.go:58] Using non-groupfied API resources is deprecated and will be removed in a future release, update apiVersion to "template.openshift.io/v1" for your resource
pod/mysql created
pod/todoapi created
service/todoapi created
service/mysql created
persistentvolumeclaim/dbclaim created
[student@workstation multicontainer-openshift]$ oc get pods -w
NAME      READY   STATUS    RESTARTS   AGE
mysql     1/1     Running   0          30s
todoapi   1/1     Running   0          30s
^C[student@workstation multicontainer-openshift]$ oc port-forward mysql 3306:3306
Forwarding from 127.0.0.1:3306 -> 3306
Forwarding from [::1]:3306 -> 3306
Handling connection for 3306
^C[student@workstation multicontainer-openshift]$ oc port-forward mysql 3306:3306^C
[student@workstation multicontainer-openshift]$ oc expose service todoapi
route.route.openshift.io/todoapi exposed
[student@workstation multicontainer-openshift]$ oc get service
NAME      TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)     AGE
mysql     ClusterIP   172.30.88.78   <none>        3306/TCP    5m56s
todoapi   ClusterIP   172.30.10.80   <none>        30080/TCP   5m56s
[student@workstation multicontainer-openshift]$ oc get routes
NAME      HOST/PORT                                              PATH   SERVICES   PORT    TERMINATION   WILDCARD
todoapi   todoapi-lqtpout-template.apps.ap410.prod.nextcle.com          todoapi    30080                 None
[student@workstation multicontainer-openshift]$ oc status
In project lqtpout-template on server https://api.ap410.prod.nextcle.com:6443

svc/mysql - 172.30.88.78:3306
  pod/mysql runs registry.redhat.io/rhel8/mysql-80:1

http://todoapi-lqtpout-template.apps.ap410.prod.nextcle.com to pod port 30080 (svc/todoapi)
  pod/todoapi runs quay.io/redhattraining/do180-todonodejs-12

View details with 'oc describe <resource>/<name>' or list resources with 'oc get all'.
[student@workstation multicontainer-openshift]$ 

################
# oc logs 
################
student@workstation ~]$ oc logs
error: expected 'logs [-f] [-p] (POD | TYPE/NAME) [-c CONTAINER]'.
POD or TYPE/NAME is a required argument for the logs command
See 'oc logs -h' for help and examples
[student@workstation ~]$ oc logs -h
Print the logs for a resource.

 Supported resources are builds, build configs (bc), deployment configs (dc), and pods. When a pod is specified and has
more than one container, the container name should be specified via -c. When a build config or deployment config is
specified, you can view the logs for a particular version of it via --version.

 If your pod is failing to start, you may need to use the --previous option to see the logs of the last attempt.

Usage:
  oc logs [-f] [-p] (POD | TYPE/NAME) [-c CONTAINER] [flags]

Examples:
  # Start streaming the logs of the most recent build of the openldap build config
  oc logs -f bc/openldap
  
  # Start streaming the logs of the latest deployment of the mysql deployment config
  oc logs -f dc/mysql
  
  # Get the logs of the first deployment for the mysql deployment config. Note that logs
  # from older deployments may not exist either because the deployment was successful
  # or due to deployment pruning or manual deletion of the deployment
  oc logs --version=1 dc/mysql
  
  # Return a snapshot of ruby-container logs from pod backend
  oc logs backend -c ruby-container
  
  # Start streaming of ruby-container logs from pod backend
  oc logs -f pod/backend -c ruby-container

Options:
      --all-containers=false: Get all containers' logs in the pod(s).
  -c, --container='': Print the logs of this container
  -f, --follow=false: Specify if the logs should be streamed.
      --ignore-errors=false: If watching / following pod logs, allow for any errors that occur to be non-fatal
      --insecure-skip-tls-verify-backend=false: Skip verifying the identity of the kubelet that logs are requested from.
In theory, an attacker could provide invalid log content back. You might want to use this if your kubelet serving
certificates have expired.
      --limit-bytes=0: Maximum bytes of logs to return. Defaults to no limit.
      --max-log-requests=5: Specify maximum number of concurrent logs to follow when using by a selector. Defaults to 5.
      --pod-running-timeout=20s: The length of time (like 5s, 2m, or 3h, higher than zero) to wait until at least one
pod is running
      --prefix=false: Prefix each log line with the log source (pod name and container name)
  -p, --previous=false: If true, print the logs for the previous instance of the container in a pod if it exists.
  -l, --selector='': Selector (label query) to filter on.
      --since=0s: Only return logs newer than a relative duration like 5s, 2m, or 3h. Defaults to all logs. Only one of
since-time / since may be used.
      --since-time='': Only return logs after a specific date (RFC3339). Defaults to all logs. Only one of since-time /
since may be used.
      --tail=-1: Lines of recent log file to display. Defaults to -1 with no selector, showing all log lines otherwise
10, if a selector is provided.
      --timestamps=false: Include timestamps on each line in the log output
      --version=0: View the logs of a particular build or deployment by version if greater than zero

Use "oc options" for a list of global command-line options (applies to all commands).
[student@workstation ~]$ 

############
# oc label
############
[student@workstation multicontainer-openshift]$ oc label 
error: one or more resources must be specified as <resource> <name> or <resource>/<name>
[student@workstation multicontainer-openshift]$ oc label -h
Update the labels on a resource.

  *  A label key and value must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and
underscores, up to  63 characters each.
  *  Optionally, the key can begin with a DNS subdomain prefix and a single '/', like example.com/my-app.
  *  If --overwrite is true, then existing labels can be overwritten, otherwise attempting to overwrite a label will
result in an error.
  *  If --resource-version is specified, then updates will use this resource version, otherwise the existing
resource-version will be used.

Usage:
  oc label [--overwrite] (-f FILENAME | TYPE NAME) KEY_1=VAL_1 ... KEY_N=VAL_N [--resource-version=version] [flags]

Examples:
  # Update pod 'foo' with the label 'unhealthy' and the value 'true'
  oc label pods foo unhealthy=true
  
  # Update pod 'foo' with the label 'status' and the value 'unhealthy', overwriting any existing value
  oc label --overwrite pods foo status=unhealthy
  
  # Update all pods in the namespace
  oc label pods --all status=unhealthy
  
  # Update a pod identified by the type and name in "pod.json"
  oc label -f pod.json status=unhealthy
  
  # Update pod 'foo' only if the resource is unchanged from version 1
  oc label pods foo status=unhealthy --resource-version=1
  
  # Update pod 'foo' by removing a label named 'bar' if it exists
  # Does not require the --overwrite flag
  oc label pods foo bar-

Options:
      --all=false: Select all resources, in the namespace of the specified resource types
  -A, --all-namespaces=false: If true, check the specified action in all namespaces.
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in
the template. Only applies to golang and jsonpath output formats.
      --dry-run='none': Must be "none", "server", or "client". If client strategy, only print the object that would be
sent, without sending it. If server strategy, submit server-side request without persisting the resource.
      --field-manager='kubectl-label': Name of the manager used to track field ownership.
      --field-selector='': Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector
key1=value1,key2=value2). The server only supports a limited number of field queries per type.
  -f, --filename=[]: Filename, directory, or URL to files identifying the resource to update the labels
  -k, --kustomize='': Process the kustomization directory. This flag can't be used together with -f or -R.
      --list=false: If true, display the labels for a given resource.
      --local=false: If true, label will NOT contact api-server but run locally.
  -o, --output='': Output format. One of:
json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file.
      --overwrite=false: If true, allow labels to be overwritten, otherwise reject label updates that overwrite existing
labels.
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage
related manifests organized within the same directory.
      --resource-version='': If non-empty, the labels update will only succeed if this is the current resource-version
for the object. Only valid when specifying a single resource.
  -l, --selector='': Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l
key1=value1,key2=value2).
      --show-managed-fields=false: If true, keep the managedFields when printing objects in JSON or YAML format.
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The
template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].

Use "oc options" for a list of global command-line options (applies to all commands).



###
oc new-app or create
###
student@workstation resources]$ oc new-app -f nexus-deployment.yaml 
error: object in "nexus-deployment.yaml" is not a template
error: unable to locate any template files with name "nexus-deployment.yaml"

The 'oc new-app' command will match arguments to the following types:

  1. Images tagged into image streams in the current project or the 'openshift' project
     - if you don't specify a tag, we'll add ':latest'
  2. Images in the container storage, on remote registries, or on the local container engine
  3. Templates in the current project or the 'openshift' project
  4. Git repository URLs or local paths that point to Git repositories
--
[student@workstation resources]$ grep kind nexus-deployment.yaml 
  kind: Service
  kind: PersistentVolumeClaim
  kind: Deployment
kind: List

[student@workstation resources]$ envsubst < nexus-deployment.yaml | oc create -f -
service/nexus created
persistentvolumeclaim/nexus created
deployment.apps/nexus created

###
OpenShift Client

This client helps you develop, build, deploy, and run your applications on any
OpenShift or Kubernetes cluster. It also includes the administrative
commands for managing a cluster under the 'adm' subcommand.

Usage:
  oc [flags]

Basic Commands:
  login           Log in to a server
  new-project     Request a new project
  new-app         Create a new application
  status          Show an overview of the current project
  project         Switch to another project
  projects        Display existing projects
  explain         Get documentation for a resource

Build and Deploy Commands:
  rollout         Manage a Kubernetes deployment or OpenShift deployment config
  rollback        Revert part of an application back to a previous deployment
  new-build       Create a new build configuration
  start-build     Start a new build
  cancel-build    Cancel running, pending, or new builds
  import-image    Import images from a container image registry
  tag             Tag existing images into image streams

Application Management Commands:
  create          Create a resource from a file or from stdin
  apply           Apply a configuration to a resource by file name or stdin
  get             Display one or many resources
  describe        Show details of a specific resource or group of resources
  edit            Edit a resource on the server
  set             Commands that help set specific features on objects
  label           Update the labels on a resource
  annotate        Update the annotations on a resource
  expose          Expose a replicated application as a service or route
  delete          Delete resources by file names, stdin, resources and names, or by resources and label selector
  scale           Set a new size for a deployment, replica set, or replication controller
  autoscale       Autoscale a deployment config, deployment, replica set, stateful set, or replication controller
  secrets         Manage secrets
  serviceaccounts Manage service accounts in your project

Troubleshooting and Debugging Commands:
  logs            Print the logs for a container in a pod
  rsh             Start a shell session in a container
  rsync           Copy files between a local file system and a pod
  port-forward    Forward one or more local ports to a pod
  debug           Launch a new instance of a pod for debugging
  exec            Execute a command in a container
  proxy           Run a proxy to the Kubernetes API server
  attach          Attach to a running container
  run             Run a particular image on the cluster
  cp              Copy files and directories to and from containers
  wait            Experimental: Wait for a specific condition on one or many resources

Advanced Commands:
  adm             Tools for managing a cluster
  replace         Replace a resource by file name or stdin
  patch           Update fields of a resource
  process         Process a template into list of resources
  extract         Extract secrets or config maps to disk
  observe         Observe changes to resources and react to them (experimental)
  policy          Manage authorization policy
  auth            Inspect authorization
  image           Useful commands for managing images
  registry        Commands for working with the registry
  idle            Idle scalable resources
  api-versions    Print the supported API versions on the server, in the form of "group/version"
  api-resources   Print the supported API resources on the server
  cluster-info    Display cluster information
  diff            Diff the live version against a would-be applied version
  kustomize       Build a kustomization target from a directory or URL.

Settings Commands:
  logout          End the current server session
  config          Modify kubeconfig files
  whoami          Return information about the current session
  completion      Output shell completion code for the specified shell (bash, zsh or fish)

Other Commands:
  help            Help about any command
  plugin          Provides utilities for interacting with plugins
  version         Print the client and server version information

Use "oc <command> --help" for more information about a given command.
Use "oc options" for a list of global command-line options (applies to all commands).
(END)
======================
###
PODMAN
###
[student@workstation ~]$ podman ps
CONTAINER ID  IMAGE                   COMMAND            CREATED         STATUS             PORTS                      NAMES
033f5b91b5a4  localhost/nexus:latest  sh nexus-start.sh  16 minutes ago  Up 16 minutes ago  127.0.0.1:18081->8081/tcp  thirsty_margulis
[student@workstation ~]$ id
uid=1000(student) gid=1000(student) groups=1000(student),10(wheel) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023
[student@workstation ~]$ podman exec -l -it /bin/bash
[nexus@033f5b91b5a4 ~]$ id
uid=1001(nexus) gid=1001(nexus) groups=1001(nexus)
[nexus@033f5b91b5a4 ~]$ 

###
OC
###
[student@workstation local]$ oc exec nexus-d79b9b595-k99d2 -it -- /bin/bash
bash-4.4$ ls -ld /opt
drwxr-xr-x. 1 root root 19 Aug 19 14:26 /opt
bash-4.4$ id
uid=1000800000(1000800000) gid=0(root) groups=0(root),1000800000
bash-4.4$ ls -l /opt 
total 0
drwxr-xr-x. 1 nexus nexus 179 Aug 19 14:26 nexus
bash-4.4$ ls -l /opt/nexus/
total 71388
drwxr-xr-x.  8 nexus nexus           113 Feb  8  2017 nexus-2.14.3-02
-rw-rw-r--.  1 nexus nexus      73091989 Aug 15 12:53 nexus-2.14.3-02-bundle.tar.gz
-rwxrwxr-x.  1 nexus nexus           473 Mar 22 13:13 nexus-start.sh
lrwxrwxrwx.  1 nexus nexus            26 Aug 19 14:26 nexus2 -> /opt/nexus/nexus-2.14.3-02
drwxrwsr-x. 15 root  1000800000     4096 Aug 19 14:33 sonatype-work
bash-4.4$ id
uid=1000800000(1000800000) gid=0(root) groups=0(root),1000800000
bash-4.4$



===
[student@workstation local]$ history|grep "oc create"
  153  oc process -f openshift.mysql-persistent.template |oc create -f -
  235  oc process -f todo-template.json |oc create -f -
  338  oc create -h
  339  oc create -f quote-php-template.json 
  366  oc process quote-php-persistent -p RHT_OCP4_QUAY_USER=alan_lu |oc create -f -
  937  envsubst < nexus-deployment.yaml | oc create -f -
[student@workstation resources]$ grep -C5  kind nexus-deployment.yaml 
apiVersion: v1
items:
- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: nexus
    name: nexus
  spec:
--
    - name: nexus
      port: 8081
    selector:
      name: nexus
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      app: nexus
    name: nexus
  spec:
--
    - ReadWriteOnce
    resources:
      requests:
        storage: 1Gi
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    labels:
      app: nexus
    name: nexus
  spec:
--
        - name: nexus-data
          persistentVolumeClaim:
            claimName: nexus
    triggers:
    - type: ConfigChange
kind: List
metadata: {}

############
# oc get
############

[student@workstation ~]$ oc get pods -h
Display one or many resources.

 Prints a table of the most important information about the specified resources. You can filter the list using a label
selector and the --selector flag. If the desired resource type is namespaced you will only see results in your current
namespace unless you pass --all-namespaces.

 By specifying the output as 'template' and providing a Go template as the value of the --template flag, you can filter
the attributes of the fetched resources.

 Use "oc api-resources" for a complete list of supported resources.

Usage:
  oc get
[(-o|--output=)json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file|custom-columns|custom-columns-file|wide]
(TYPE[.VERSION][.GROUP] [NAME | -l label] | TYPE[.VERSION][.GROUP]/NAME ...) [flags]

Examples:
  # List all pods in ps output format
  oc get pods
  
  # List all pods in ps output format with more information (such as node name)
  oc get pods -o wide
  
  # List a single replication controller with specified NAME in ps output format
  oc get replicationcontroller web
  
  # List deployments in JSON output format, in the "v1" version of the "apps" API group
  oc get deployments.v1.apps -o json
  
  # List a single pod in JSON output format
  oc get -o json pod web-pod-13je7
  
  # List a pod identified by type and name specified in "pod.yaml" in JSON output format
  oc get -f pod.yaml -o json
  
  # List resources from a directory with kustomization.yaml - e.g. dir/kustomization.yaml
  oc get -k dir/
  
  # Return only the phase value of the specified pod
  oc get -o template pod/web-pod-13je7 --template={{.status.phase}}
  
  # List resource information in custom columns
  oc get pod test-pod -o custom-columns=CONTAINER:.spec.containers[0].name,IMAGE:.spec.containers[0].image
  
  # List all replication controllers and services together in ps output format
  oc get rc,services
  
  # List one or more resources by their type and names
  oc get rc/web service/frontend pods/web-pod-13je7

Options:
  -A, --all-namespaces=false: If present, list the requested object(s) across all namespaces. Namespace in current
context is ignored even if specified with --namespace.
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in
the template. Only applies to golang and jsonpath output formats.
      --chunk-size=500: Return large lists in chunks rather than all at once. Pass 0 to disable. This flag is beta and
may change in the future.
      --field-selector='': Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector
key1=value1,key2=value2). The server only supports a limited number of field queries per type.
  -f, --filename=[]: Filename, directory, or URL to files identifying the resource to get from a server.
      --ignore-not-found=false: If the requested object does not exist the command will return exit code 0.
  -k, --kustomize='': Process the kustomization directory. This flag can't be used together with -f or -R.
  -L, --label-columns=[]: Accepts a comma separated list of labels that are going to be presented as columns. Names are
case-sensitive. You can also use multiple flag options like -L label1 -L label2...
      --no-headers=false: When using the default or custom-column output format, don't print headers (default print
headers).
  -o, --output='': Output format. One of:
json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file|custom-columns-file|custom-columns|wide
See custom columns [https://kubernetes.io/docs/reference/kubectl/overview/#custom-columns], golang template
[http://golang.org/pkg/text/template/#pkg-overview] and jsonpath template
[https://kubernetes.io/docs/reference/kubectl/jsonpath/].
      --output-watch-events=false: Output watch event objects when --watch or --watch-only is used. Existing objects are
output as initial ADDED events.
      --raw='': Raw URI to request from the server.  Uses the transport specified by the kubeconfig file.
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage
related manifests organized within the same directory.
  -l, --selector='': Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2)
      --server-print=true: If true, have the server return the appropriate table output. Supports extension APIs and
CRDs.
      --show-kind=false: If present, list the resource type for the requested object(s).
      --show-labels=false: When printing, show all labels as the last column (default hide labels column)
      --show-managed-fields=false: If true, keep the managedFields when printing objects in JSON or YAML format.
      --sort-by='': If non-empty, sort list types using this field specification.  The field specification is expressed
as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression
must be an integer or a string.
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The
template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].
  -w, --watch=false: After listing/getting the requested object, watch for changes.
      --watch-only=false: Watch for changes to the requested object(s), without listing/getting first.

Use "oc options" for a list of global command-line options (applies to all commands).
[student@workstation ~]$


###
[student@workstation ~]$ oc label --all app=nexus_old --overwrite
error: one or more resources must be specified as <resource> <name> or <resource>/<name>
[student@workstation ~]$ oc label all --all app=nexus_old --overwrite
pod/nexus-d79b9b595-k99d2 labeled
service/nexus labeled
deployment.apps/nexus labeled
replicaset.apps/nexus-d79b9b595 labeled
route.route.openshift.io/nexus labeled
[student@workstation ~]$ 


[student@workstation ~]$ oc get all -l app=nexus_old
NAME                        READY   STATUS    RESTARTS       AGE
pod/nexus-d79b9b595-k99d2   1/1     Running   566 (4d ago)   6d

NAME            TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)    AGE
service/nexus   ClusterIP   172.30.13.72   <none>        8081/TCP   6d

NAME                    READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/nexus   1/1     1            1           6d

NAME                              DESIRED   CURRENT   READY   AGE
replicaset.apps/nexus-d79b9b595   1         1         1       6d

NAME                             HOST/PORT                                         PATH   SERVICES   PORT    TERMINATION   WILDCARD
route.route.openshift.io/nexus   nexus-lqtpou-review.apps.ap410.prod.nextcle.com          nexus      nexus                 None
[student@workstation ~]$ oc delete all -l app=nexus_old
pod "nexus-d79b9b595-k99d2" deleted
service "nexus" deleted
deployment.apps "nexus" deleted
replicaset.apps "nexus-d79b9b595" deleted
route.route.openshift.io "nexus" deleted
[student@workstation ~]$ oc get all
NAME                        READY   STATUS        RESTARTS   AGE
pod/nexus-d79b9b595-92g96   0/1     Terminating   0          9s
[student@workstation ~]$ oc get all
No resources found in lqtpou-review namespace.
[student@workstation ~]$ 

!!
[student@workstation resources]$ envsubst < nexus-deployment.yaml |oc create -f -
service/nexus created
deployment.apps/nexus created
Error from server (AlreadyExists): error when creating "STDIN": persistentvolumeclaims "nexus" already exists
[student@workstation resources]$ 
!!
[student@workstation ~]$ oc get all
No resources found in lqtpou-review namespace.
[student@workstation ~]$ oc get pvc
NAME    STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE
nexus   Bound    pvc-36829d3b-2969-4ef9-9255-6252afe914c5   1Gi        RWO            standard       6d
[student@workstation ~]$ 

[student@workstation resources]$ envsubst < nexus-deployment.yaml |oc create -f -
Error from server (AlreadyExists): error when creating "STDIN": services "nexus" already exists
Error from server (AlreadyExists): error when creating "STDIN": object is being deleted: persistentvolumeclaims "nexus" already exists
Error from server (AlreadyExists): error when creating "STDIN": deployments.apps "nexus" already exists
[student@workstation resources]$ 

!!
[student@workstation ~]$ oc label all app=nexus2 --overwrite
error: resource(s) were provided, but no name was specified
[student@workstation ~]$ oc label --all app=nexus2 --overwrite
error: one or more resources must be specified as <resource> <name> or <resource>/<name>
[student@workstation ~]$ oc label all --all app=nexus2 --overwrite
pod/nexus-d79b9b595-w47ns labeled
service/nexus labeled
deployment.apps/nexus labeled
replicaset.apps/nexus-d79b9b595 labeled
route.route.openshift.io/nexus labeled
[student@workstation ~]$ 

#################
# oc new-app
#################
[student@workstation ~]$ oc new-app -h
Create a new application by specifying source code, templates, and/or images.

 This command will try to build up the components of an application using images, templates, or code that has a public
repository. It will look up the images on the local container storage (if available), a container image registry, an
integrated image stream, or stored templates.

 If you specify a source code URL, it will set up a build that takes your source code and converts it into an image that
can run inside of a pod. Local source must be in a git repository that has a remote repository that the server can see.
The images will be deployed via a deployment or deployment configuration, and a service will be connected to the first
public port of the app. You may either specify components using the various existing flags or let oc new-app autodetect
what kind of components you have provided.

 If you provide source code, a new build will be automatically triggered. You can use 'oc status' to check the progress.

Usage:
  oc new-app (IMAGE | IMAGESTREAM | TEMPLATE | PATH | URL ...) [flags]

Examples:
  # List all local templates and image streams that can be used to create an app
  oc new-app --list
  
  # Create an application based on the source code in the current git repository (with a public remote) and a container
image
  oc new-app . --image=registry/repo/langimage
  
  # Create an application myapp with Docker based build strategy expecting binary input
  oc new-app  --strategy=docker --binary --name myapp
  
  # Create a Ruby application based on the provided [image]~[source code] combination
  oc new-app centos/ruby-25-centos7~https://github.com/sclorg/ruby-ex.git
  
  # Use the public container registry MySQL image to create an app. Generated artifacts will be labeled with db=mysql
  oc new-app mysql MYSQL_USER=user MYSQL_PASSWORD=pass MYSQL_DATABASE=testdb -l db=mysql
  
  # Use a MySQL image in a private registry to create an app and override application artifacts' names
  oc new-app --image=myregistry.com/mycompany/mysql --name=private
  
  # Create an application from a remote repository using its beta4 branch
  oc new-app https://github.com/openshift/ruby-hello-world#beta4
  
  # Create an application based on a stored template, explicitly setting a parameter value
  oc new-app --template=ruby-helloworld-sample --param=MYSQL_USER=admin
  
  # Create an application from a remote repository and specify a context directory
  oc new-app https://github.com/youruser/yourgitrepo --context-dir=src/build
  
  # Create an application from a remote private repository and specify which existing secret to use
  oc new-app https://github.com/youruser/yourgitrepo --source-secret=yoursecret
  
  # Create an application based on a template file, explicitly setting a parameter value
  oc new-app --file=./example/myapp/template.json --param=MYSQL_USER=admin
  
  # Search all templates, image streams, and container images for the ones that match "ruby"
  oc new-app --search ruby
  
  # Search for "ruby", but only in stored templates (--template, --image-stream and --image
  # can be used to filter search results)
  oc new-app --search --template=ruby
  
  # Search for "ruby" in stored templates and print the output as YAML
  oc new-app --search --template=ruby --output=yaml

Options:
      --allow-missing-images=false: If true, indicates that referenced container images that cannot be found locally or
in a registry should still be used.
      --allow-missing-imagestream-tags=false: If true, indicates that image stream tags that don't exist should still be
used.
      --allow-missing-template-keys=false: If true, ignore any errors in templates when a field or map key is missing in
the template. Only applies to golang and jsonpath output formats.
      --as-deployment-config=false: If true create this application as a deployment config, which allows for hooks and
custom strategies.
      --as-test=false: If true create this application as a test deployment, which validates that the deployment
succeeds and then scales down.
      --binary=false: Instead of expecting a source URL, set the build to expect binary contents. Will disable triggers.
      --build-env=[]: Specify a key-value pair for an environment variable to set into each build image.
      --build-env-file=[]: File containing key-value pairs of environment variables to set into each build image.
      --code=[]: Source code to use to build this application.
      --context-dir='': Context directory to be used for the build.
      --dry-run=false: If true, show the result of the operation without performing it.
  -e, --env=[]: Specify a key-value pair for an environment variable to set into each container.
      --env-file=[]: File containing key-value pairs of environment variables to set into each container.
  -f, --file=[]: Path to a template file to use for the app.
      --grant-install-rights=false: If true, a component that requires access to your account may use your token to
install software into your project. Only grant images you trust the right to run with your token.
      --group=[]: Indicate components that should be grouped together as <comp1>+<comp2>.
      --ignore-unknown-parameters=false: If true, will not stop processing if a provided parameter does not exist in the
template.
      --image=[]: Name of a container image to include in the app.  Note:  not specifying a registry or repository means
defaults in place for client image pulls are employed.
  -i, --image-stream=[]: Name of an image stream to use in the app.
      --insecure-registry=false: If true, indicates that the referenced container images are on insecure registries and
should bypass certificate checking
  -l, --labels='': Label to set in all resources for this application.
  -L, --list=false: List all local templates and image streams that can be used to create.
      --name='': Set name to use for generated application artifacts
      --no-install=false: Do not attempt to run images that describe themselves as being installable
  -o, --output='': Output format. One of:
json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file.
      --output-version='': The preferred API versions of the output objects
  -p, --param=[]: Specify a key-value pair (e.g., -p FOO=BAR) to set/override a parameter value in the template.
      --param-file=[]: File containing parameter values to set/override in the template.
  -S, --search=false: Search all templates, image streams, and container images that match the arguments provided.
  -a, --show-all=false: When printing, show all resources (default hide terminated pods.)
      --show-labels=false: When printing, show all labels as the last column (default hide labels column)
      --show-managed-fields=false: If true, keep the managedFields when printing objects in JSON or YAML format.
      --sort-by='': If non-empty, sort list types using this field specification.  The field specification is expressed
as a JSONPath expression (e.g. '{.metadata.name}'). The field in the API resource specified by this JSONPath expression
must be an integer or a string.
      --source-secret='': The name of an existing secret that should be used for cloning a private git repository.
      --strategy=: Specify the build strategy to use if you don't want to detect (docker|pipeline|source). NOTICE: the
pipeline strategy is deprecated; consider using Jenkinsfiles directly on Jenkins or OpenShift Pipelines.
      --template=[]: Name of a stored template to use in the app.

Use "oc options" for a list of global command-line options (applies to all commands).
[student@workstation ~]$ 

############################
# oc options
############################

[student@workstation ~]$ oc options 
The following options can be passed to any command:

      --add-dir-header=false: If true, adds the file directory to the header of the log messages (DEPRECATED: will be
removed in a future release, see
https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)
      --alsologtostderr=false: log to standard error as well as files (DEPRECATED: will be removed in a future release,
see
https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)
      --as='': Username to impersonate for the operation. User could be a regular user or a service account in a
namespace.
      --as-group=[]: Group to impersonate for the operation, this flag can be repeated to specify multiple groups.
      --as-uid='': UID to impersonate for the operation.
      --cache-dir='/home/student/.kube/cache': Default cache directory
      --certificate-authority='': Path to a cert file for the certificate authority
      --client-certificate='': Path to a client certificate file for TLS
      --client-key='': Path to a client key file for TLS
      --cluster='': The name of the kubeconfig cluster to use
      --context='': The name of the kubeconfig context to use
      --insecure-skip-tls-verify=false: If true, the server's certificate will not be checked for validity. This will
make your HTTPS connections insecure
      --kubeconfig='': Path to the kubeconfig file to use for CLI requests.
      --log-backtrace-at=:0: when logging hits line file:N, emit a stack trace (DEPRECATED: will be removed in a future
release, see
https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)
      --log-dir='': If non-empty, write log files in this directory (DEPRECATED: will be removed in a future release,
see
https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)
      --log-file='': If non-empty, use this log file (DEPRECATED: will be removed in a future release, see
https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)
      --log-file-max-size=1800: Defines the maximum size a log file can grow to. Unit is megabytes. If the value is 0,
the maximum file size is unlimited. (DEPRECATED: will be removed in a future release, see
https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)
      --log-flush-frequency=5s: Maximum number of seconds between log flushes
      --loglevel=0: Set the level of log output (0-10)
      --logtostderr=true: log to standard error instead of files (DEPRECATED: will be removed in a future release, see
https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)
      --match-server-version=false: Require server version to match client version
  -n, --namespace='': If present, the namespace scope for this CLI request
      --one-output=false: If true, only write logs to their native severity level (vs also writing to each lower
severity level) (DEPRECATED: will be removed in a future release, see
https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)
      --request-timeout='0': The length of time to wait before giving up on a single server request. Non-zero values
should contain a corresponding time unit (e.g. 1s, 2m, 3h). A value of zero means don't timeout requests.
  -s, --server='': The address and port of the Kubernetes API server
      --skip-headers=false: If true, avoid header prefixes in the log messages (DEPRECATED: will be removed in a future
release, see
https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)
      --skip-log-headers=false: If true, avoid headers when opening log files (DEPRECATED: will be removed in a future
release, see
https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)
      --stderrthreshold=2: logs at or above this threshold go to stderr (DEPRECATED: will be removed in a future
release, see
https://github.com/kubernetes/enhancements/tree/master/keps/sig-instrumentation/2845-deprecate-klog-specific-flags-in-k8s-components)
      --tls-server-name='': Server name to use for server certificate validation. If it is not provided, the hostname
used to contact the server is used
      --token='': Bearer token for authentication to the API server
      --user='': The name of the kubeconfig user to use
  -v, --v=0: number for the log level verbosity
      --vmodule=: comma-separated list of pattern=N settings for file-filtered logging
      --warnings-as-errors=false: Treat warnings received from the server as errors and exit with a non-zero exit code
[student@workstation ~]$ 

[student@workstation nodejs-app]$ oc new-app --name nodejs-dev nodejs:16-ubi8~. --context-dir=nodejs-app --build-env npm_config_registry=http://nexus-common.apps.ap410.prod.nextcle.com/repository/nodejs 
--> Found image dfd08e2 (6 months old) in image stream "openshift/nodejs" under tag "16-ubi8" for "nodejs:16-ubi8"

    Node.js 16 
    ---------- 
    Node.js 16 available as container is a base platform for building and running various Node.js 16 applications and frameworks. Node.js is a platform built on Chrome's JavaScript runtime for easily building fast, scalable network applications. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient, perfect for data-intensive real-time applications that run across distributed devices.

    Tags: builder, nodejs, nodejs16

    * A source build using source code from https://github.com/avoker/DO180-apps#troubleshoot-review will be created
      * The resulting image will be pushed to image stream tag "nodejs-dev:latest"
      * Use 'oc start-build' to trigger a new build

--> Creating resources ...
    imagestream.image.openshift.io "nodejs-dev" created
    buildconfig.build.openshift.io "nodejs-dev" created
    deployment.apps "nodejs-dev" created
    service "nodejs-dev" created
--> Success
    Build scheduled, use 'oc logs -f buildconfig/nodejs-dev' to track its progress.
    Application is not exposed. You can expose services to the outside world by executing one or more of the commands below:
     'oc expose service/nodejs-dev' 
    Run 'oc status' to view your app.
[student@workstation nodejs-app]$ oc status
In project lqtpou-nodejs-app on server https://api.ap410.prod.nextcle.com:6443

svc/nodejs-dev - 172.30.134.62:8080
  deployment/nodejs-dev deploys istag/nodejs-dev:latest <-
    bc/nodejs-dev source builds https://github.com/avoker/DO180-apps#troubleshoot-review on openshift/nodejs:16-ubi8 
      build #1 running for 7 seconds
    deployment #1 running for 7 seconds - 0/1 pods growing to 1


1 info identified, use 'oc status --suggest' to see details.
[student@workstation nodejs-app]$


#############
# oc delete
#############
[student@workstation ~]$ oc delete -h
Delete resources by file names, stdin, resources and names, or by resources and label selector.

 JSON and YAML formats are accepted. Only one type of argument may be specified: file names, resources and names, or
resources and label selector.

 Some resources, such as pods, support graceful deletion. These resources define a default period before they are
forcibly terminated (the grace period) but you may override that value with the --grace-period flag, or pass --now to
set a grace-period of 1. Because these resources often represent entities in the cluster, deletion may not be
acknowledged immediately. If the node hosting a pod is down or cannot reach the API server, termination may take
significantly longer than the grace period. To force delete a resource, you must specify the --force flag. Note: only a
subset of resources support graceful deletion. In absence of the support, the --grace-period flag is ignored.

 IMPORTANT: Force deleting pods does not wait for confirmation that the pod's processes have been terminated, which can
leave those processes running until the node detects the deletion and completes graceful deletion. If your processes use
shared storage or talk to a remote API and depend on the name of the pod to identify themselves, force deleting those
pods may result in multiple processes running on different machines using the same identification which may lead to data
corruption or inconsistency. Only force delete pods when you are sure the pod is terminated, or if your application can
tolerate multiple copies of the same pod running at once. Also, if you force delete pods, the scheduler may place new
pods on those nodes before the node has released those resources and causing those pods to be evicted immediately.

 Note that the delete command does NOT do resource version checks, so if someone submits an update to a resource right
when you submit a delete, their update will be lost along with the rest of the resource.

Usage:
  oc delete ([-f FILENAME] | [-k DIRECTORY] | TYPE [(NAME | -l label | --all)]) [flags]

Examples:
  # Delete a pod using the type and name specified in pod.json
  oc delete -f ./pod.json
  
  # Delete resources from a directory containing kustomization.yaml - e.g. dir/kustomization.yaml
  oc delete -k dir
  
  # Delete a pod based on the type and name in the JSON passed into stdin
  cat pod.json | oc delete -f -
  
  # Delete pods and services with same names "baz" and "foo"
  oc delete pod,service baz foo
  
  # Delete pods and services with label name=myLabel
  oc delete pods,services -l name=myLabel
  
  # Delete a pod with minimal delay
  oc delete pod foo --now
  
  # Force delete a pod on a dead node
  oc delete pod foo --force
  
  # Delete all pods
  oc delete pods --all

Options:
      --all=false: Delete all resources, in the namespace of the specified resource types.
  -A, --all-namespaces=false: If present, list the requested object(s) across all namespaces. Namespace in current
context is ignored even if specified with --namespace.
      --cascade='background': Must be "background", "orphan", or "foreground". Selects the deletion cascading strategy
for the dependents (e.g. Pods created by a ReplicationController). Defaults to background.
      --dry-run='none': Must be "none", "server", or "client". If client strategy, only print the object that would be
sent, without sending it. If server strategy, submit server-side request without persisting the resource.
      --field-selector='': Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector
key1=value1,key2=value2). The server only supports a limited number of field queries per type.
  -f, --filename=[]: containing the resource to delete.
      --force=false: If true, immediately remove resources from API and bypass graceful deletion. Note that immediate
deletion of some resources may result in inconsistency or data loss and requires confirmation.
      --grace-period=-1: Period of time in seconds given to the resource to terminate gracefully. Ignored if negative.
Set to 1 for immediate shutdown. Can only be set to 0 when --force is true (force deletion).
      --ignore-not-found=false: Treat "resource not found" as a successful delete. Defaults to "true" when --all is
specified.
  -k, --kustomize='': Process a kustomization directory. This flag can't be used together with -f or -R.
      --now=false: If true, resources are signaled for immediate shutdown (same as --grace-period=1).
  -o, --output='': Output mode. Use "-o name" for shorter output (resource/name).
      --raw='': Raw URI to DELETE to the server.  Uses the transport specified by the kubeconfig file.
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage
related manifests organized within the same directory.
  -l, --selector='': Selector (label query) to filter on.
      --timeout=0s: The length of time to wait before giving up on a delete, zero means determine a timeout from the
size of the object
      --wait=true: If true, wait for resources to be gone before returning. This waits for finalizers.

Use "oc options" for a list of global command-line options (applies to all commands).

Update the labels on a resource.

  *  A label key and value must begin with a letter or number, and may contain letters, numbers, hyphens, dots, and underscores, up to  63 characters each.
  *  Optionally, the key can begin with a DNS subdomain prefix and a single '/', like example.com/my-app.
  *  If --overwrite is true, then existing labels can be overwritten, otherwise attempting to overwrite a label will result in an error.
  *  If --resource-version is specified, then updates will use this resource version, otherwise the existing resource-version will be used.

##########################
# oc label
##########################
Usage:
  oc label [--overwrite] (-f FILENAME | TYPE NAME) KEY_1=VAL_1 ... KEY_N=VAL_N [--resource-version=version] [flags]

Examples:
  # Update pod 'foo' with the label 'unhealthy' and the value 'true'
  oc label pods foo unhealthy=true
  
  # Update pod 'foo' with the label 'status' and the value 'unhealthy', overwriting any existing value
  oc label --overwrite pods foo status=unhealthy
  
  # Update all pods in the namespace
  oc label pods --all status=unhealthy
  
  # Update a pod identified by the type and name in "pod.json"
  oc label -f pod.json status=unhealthy
  
  # Update pod 'foo' only if the resource is unchanged from version 1
  oc label pods foo status=unhealthy --resource-version=1
  
  # Update pod 'foo' by removing a label named 'bar' if it exists
  # Does not require the --overwrite flag
  oc label pods foo bar-

Options:
      --all=false: Select all resources, in the namespace of the specified resource types
  -A, --all-namespaces=false: If true, check the specified action in all namespaces.
      --allow-missing-template-keys=true: If true, ignore any errors in templates when a field or map key is missing in the template. Only applies to golang and jsonpath output formats.
      --dry-run='none': Must be "none", "server", or "client". If client strategy, only print the object that would be sent, without sending it. If server strategy, submit server-side request without persisting the resource.
      --field-manager='kubectl-label': Name of the manager used to track field ownership.
      --field-selector='': Selector (field query) to filter on, supports '=', '==', and '!='.(e.g. --field-selector key1=value1,key2=value2). The server only supports a limited number of field queries per type.
  -f, --filename=[]: Filename, directory, or URL to files identifying the resource to update the labels
  -k, --kustomize='': Process the kustomization directory. This flag can't be used together with -f or -R.
      --list=false: If true, display the labels for a given resource.
      --local=false: If true, label will NOT contact api-server but run locally.
  -o, --output='': Output format. One of: json|yaml|name|go-template|go-template-file|template|templatefile|jsonpath|jsonpath-as-json|jsonpath-file.
      --overwrite=false: If true, allow labels to be overwritten, otherwise reject label updates that overwrite existing labels.
  -R, --recursive=false: Process the directory used in -f, --filename recursively. Useful when you want to manage related manifests organized within the same directory.
      --resource-version='': If non-empty, the labels update will only succeed if this is the current resource-version for the object. Only valid when specifying a single resource.
  -l, --selector='': Selector (label query) to filter on, supports '=', '==', and '!='.(e.g. -l key1=value1,key2=value2).
      --show-managed-fields=false: If true, keep the managedFields when printing objects in JSON or YAML format.
      --template='': Template string or path to template file to use when -o=go-template, -o=go-template-file. The template format is golang templates [http://golang.org/pkg/text/template/#pkg-overview].

Use "oc options" for a list of global command-line options (applies to all commands).



####################
Containfile Example
####################
FROM ubi8/ubi:8.5
MAINTAINER Alan Lu <alan.lu@ice.com>

ARG NEXUS_VERSION 2.14.3-02
ENV NEXUS_HOME /opt/nexus
RUN yum -y install java-1.8.0-openjdk-devel rsync --nodocs && \
    yum -y clean all && \
    groupadd nexus -f -g 1001 && \
    useradd -u 1001 -g nexus -m -d ${NEXUS_HOME} -s /sbin/nologin -c "Nexus User" nexus
COPY ["./nexus-2.14.3-02-bundle.tar.gz","./nexus-start.sh", "${NEXUS_HOME}/"]
RUN tar -C ${NEXUS_HOME}/ -zxpf ${NEXUS_HOME}/nexus-2.14.3-02-bundle.tar.gz && \
    ln -s ${NEXUS_HOME}/nexus-${NEXUS_VERSION} ${NEXUS_HOME}/nexus2 && \
    mkdir -p /opt/nexus/sonatype-work && \
    chown -R nexus:nexus ${NEXUS_HOME} && \
    chmod 755 ${NEXUS_HOME}
VOLUME /opt/nexus/sonatype-work
WORKDIR /opt/nexus
USER nexus
CMD ["sh","nexus-start.sh"]

